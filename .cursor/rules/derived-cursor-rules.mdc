---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## <headers/>

## PROJECT RULES

1.  Enums should always be serialized by name.

2.  If a type is not natively supported in the target format but has round trip string conversion methods available, it should be serialized as a string.

3.  Support strong typing / inheritance with a type discriminator.

4.  Options strings should use constants.

## TECH STACK

1.  The project uses .NET.

2.  The default JSON implementation is `System.Text.Json`.

3.  The alternative JSON implementation is `Newtonsoft.Json`.

4.  YAML serialization uses `YamlDotNet`.

5.  TOML serialization uses `Tomlyn`.

6.  INI file parsing uses `IniParser`.

7.  MessagePack binary serialization uses `MessagePack-CSharp`.

8.  The .NET implementation for FlatBuffers uses `FlatSharp`.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM

1.  Use XML comments for API documentation.

2.  Create usage examples and tutorials.

3.  Document serializer-specific options and configurations.

4.  Create sample applications.

5.  Write release notes, document migration paths for new versions, and create a changelog.

## CODING STANDARDS

1.  Constants for option names to avoid string literals must be used.

2.  Use namespaces to organize code into logical groups and to prevent naming conflicts.

3.  Follow consistent naming conventions for variables, methods, and classes.

4.  Always add comments to complex logic.

5.  All code must have unit and integration tests with > 80% code coverage.

6.  Apply the principle of least privilege, grant code access to only the data and resources that are needed to fulfill its intended purpose.

7.  Avoid using reflection where there are alternatives.

8.  Avoid using the Service Locator Pattern.

9.  Ensure all necessary "using" statements are included at the top of each C# file, including but not limited to:
    *   `using System;`
    *   `using System.Collections.Generic;`
    *   `using System.Threading;`
    *   `using System.Threading.Tasks;`
    *   `using System.Text.Json;` (when using `JsonConverter` or `JsonSerializer`)
    *   `using System.Text.Json.Serialization;` (when using `JsonConverter` or `JsonSerializer`)
    *   `using System.Xml;` (when using `XmlSerializer` or `XmlDocument`)
    *   `using System.Xml.Serialization;` (when using `XmlSerializer` or `XmlDocument`)
    *   `using YamlDotNet.Core;` (when using `YamlDotNet`)
    *   `using YamlDotNet.Serialization;` (when using `YamlDotNet`)
    *   `using MessagePack;` (when using `MessagePack`)
    *   `using Tomlyn;` (when using `Tomlyn`)
    *   `using Tomlyn.Model;` (when using `Tomlyn`)
    *   `using Microsoft.Extensions.DependencyInjection;` (when using `IServiceCollection` or `ServiceCollectionExtensions`)
    *   `using System.Linq;` (when using LINQ)
    *   `using System.IO;`

## DEBUGGING

## TESTING

1.  Test each serializer implementation.

2.  Test serialization with complex object graphs.

3.  Test polymorphic serialization.

4.  Test custom type conversion.

5.  Test the serializer factory with DI.

6.  Test serializer registration and configuration.

7.  Test complex scenarios with mixed serialization formats.

8.  Benchmark different serializer implementations.

9.  Compare serialization/deserialization speed.

10. Measure memory usage and allocation.

11. Analyze payload sizes.

## SECURITY

1.  Check for security vulnerabilities.

## WORKFLOW & RELEASE RULES

1.  Automated builds must be triggered on commit.

2.  All tests must pass in CI.

3.  NuGet packages must be generated.

4.  Packages must be published to feed.

5.  Write release notes.

6.  Document migration path for new versions.

7.  Create changelog.

## REFERENCES & EXTERNAL LINKS

## CODE SNIPPETS